#pragma once
#include <optional>
#include <variant>
#include <string>

namespace GoldScorpion {

	enum class TokenType {
		TOKEN_NONE,
		TOKEN_DEF,
		TOKEN_IDENTIFIER,
		TOKEN_AS,
		TOKEN_U8,
		TOKEN_U16,
		TOKEN_U32,
		TOKEN_S8,
		TOKEN_S16,
		TOKEN_S32,
		TOKEN_STRING,
		TOKEN_LITERAL_STRING,
		TOKEN_LITERAL_INTEGER,
		TOKEN_PLUS,
		TOKEN_MINUS,
		TOKEN_ASTERISK,
		TOKEN_FORWARD_SLASH,
		TOKEN_BACK_SLASH,
		TOKEN_DOT,
		TOKEN_LEFT_PAREN,
		TOKEN_RIGHT_PAREN,
		TOKEN_EQUALS,
		TOKEN_DOUBLE_EQUALS,
		TOKEN_NOT,
		TOKEN_THEN,
		TOKEN_FUNCTION,
		TOKEN_COMMA,
		TOKEN_END,
		TOKEN_TYPE,
		TOKEN_RETURN,
		TOKEN_IMPORT,
		TOKEN_LEFT_BRACKET,
		TOKEN_RIGHT_BRACKET,
		TOKEN_ASM,
		TOKEN_DOUBLE_FORWARD_SLASH,
		TOKEN_THIS,
		TOKEN_NEWLINE,
		TOKEN_GREATER_THAN,
		TOKEN_LESS_THAN,
		TOKEN_GREATER_THAN_EQUAL,
		TOKEN_LESS_THAN_EQUAL,
		TOKEN_SHIFT_RIGHT,
		TOKEN_SHIFT_LEFT,
		TOKEN_BYREF,
		TOKEN_DOUBLE_QUOTE
	};

	struct Token {
		TokenType type;
		std::optional< std::variant< long, std::string > > value;
	};

}
